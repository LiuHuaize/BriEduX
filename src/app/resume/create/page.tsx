"use client";

import { useRef, useEffect, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { 
  Send, 
  Mic, 
  Image as ImageIcon, 
  Paperclip,
  Bot,
  User,
  Loader2,
  CheckCircle2,
  CheckCircle,
  Circle,
  ArrowLeft
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { useChat } from 'ai/react';
import { useRouter } from 'next/navigation';
import { useResume } from "@/app/resume/context/ResumeContext";
import { ResumeData } from "@/app/resume/context/ResumeContext";

// ÂÆö‰πâÁÆÄÂéÜ‰ø°ÊÅØÊî∂ÈõÜÁöÑÊ≠•È™§
const RESUME_STEPS = {
  INIT: 'init',
  BASIC_INFO: 'basic_info',
  TARGET_JOB: 'target_job',
  EDUCATION: 'education',
  WORK_EXPERIENCE: 'work_experience',
  PROJECTS: 'projects',
  SKILLS: 'skills',
  CONFIRM: 'confirm'
} as const;

type ResumeStep = typeof RESUME_STEPS[keyof typeof RESUME_STEPS];

interface Education {
  school: string;
  degree: string;
  major?: string;
  start_year: string;
  end_year: string;
  extra?: string;
}

interface WorkExperience {
  company: string;
  role: string;
  start_year: string;
  end_year: string;
  responsibilities: string[];
}

interface Project {
  title: string;
  start_year: string;
  end_year: string;
  responsibilities: string[];
}

// Á≥ªÁªüÊèêÁ§∫ËØçÔºåÂåÖÂê´ÂÆåÊï¥ÁöÑÂØπËØùÁ≠ñÁï•
const SYSTEM_PROMPT = `‰Ω†ÊòØ‰∏Ä‰∏™‰∏ì‰∏öÁöÑÁÆÄÂéÜÈ°æÈóÆÔºåÂ∏ÆÂä©Áî®Êà∑ÂàõÂª∫ÁÆÄÂéÜ„ÄÇ‰Ω†ÁöÑ‰∏ªË¶Å‰ªªÂä°ÊòØÈÄöËøáËá™ÁÑ∂ÂØπËØùÊî∂ÈõÜ‰ø°ÊÅØÔºåÂπ∂Â∞ÜÂÖ∂Ê†ºÂºèÂåñ„ÄÇËØ∑ÈÅµÂæ™‰ª•‰∏ãËßÑÂàôÔºö

1. ‰∫§‰∫íÈ£éÊ†ºÔºö
- ‰ΩøÁî®ËΩªÊùæËá™ÁÑ∂ÁöÑÂØπËØùÊñπÂºè
- Êé•ÂèóÁî®Êà∑‰ªª‰ΩïÂΩ¢ÂºèÁöÑÂõûÁ≠î
- ‰Ω†Êù•Ë¥üË¥£Â∞Ü‰ø°ÊÅØÊèêÂèñÂíåÊ†ºÂºèÂåñ
- ÊØèÊ¨°Á°ÆËÆ§Ê†ºÂºèÂåñÁöÑ‰ø°ÊÅØÊòØÂê¶ÂáÜÁ°Æ
- Â¶ÇÊûúÁî®Êà∑Ë∑≥Ê≠•ÔºåÊ∏©ËØ¢ÈóÆ‰ªñÊòØÂê¶ÊòØÂõ†‰∏∫Áº∫Â∞ëÂ∑•‰ΩúÁªèÂéÜÁ≠âÔºåÂ¶ÇÊûúÂ±ûÂÆûÔºåÂÖÅËÆ∏Ë∑≥Ê≠•ÔºåÂπ∂‰∏îÊ†áÊ≥®Ëøô‰∏ÄÊ≠•Â∑≤ÂÆåÊàê
- ‰∏çÈúÄË¶ÅÊää‰πãÂâçÊ≠•È™§ÁöÑ‰ø°ÊÅØÂÖ®ÈÉ®ÈáçÂ§ç‰∏ÄÈÅçÔºåÊúÄÂêéÊ±áÊÄªÂÜôÊúÄÁªàÁÆÄÂéÜÁöÑÊó∂ÂÄôÂÜçÂÜôÂá∫Êù•
- Âú®ÊØè‰∏ÄÊ≠•ÔºàÂ¶ÇÂ∑•‰ΩúÁªèÂéÜ„ÄÅÊïôËÇ≤ËÉåÊôØÁ≠âÔºâÊî∂ÈõÜÂÆåÊï∞ÊçÆÂêéÔºåÂä†‰∏ÄÂè•Á±ª‰ºº"ËØ∑Á°ÆËÆ§ÊàñË°•ÂÖÖÊõ¥Â§öÁªÜËäÇ"Êù•ÈºìÂä±Áî®Êà∑Ëøõ‰∏ÄÊ≠•Ë°•ÂÖÖ„ÄÇÂ¶ÇÊûúÁî®Êà∑ÊèèËø∞ËæÉ‰∏∫ÁÆÄÁï•ÔºåÁ≥ªÁªüÂèØ‰ª•‰∏ªÂä®ËØ¢ÈóÆ"ÊÇ®ÊòØÂê¶ËøòÊúâÊõ¥Â§öËØ¶ÁªÜ‰ø°ÊÅØÔºå‰æãÂ¶ÇÂõ¢ÈòüËßÑÊ®°„ÄÅÈ°πÁõÆÊàêÊûúÁöÑÂÖ∑‰ΩìÊï∞ÊçÆÁ≠âÔºü"
‰øùÊåÅËØ≠Ê∞î‰∫≤ÂàáËá™ÁÑ∂ÔºåÊØîÂ¶Ç"ÊÇ®ÂèØ‰ª•ÁÆÄÂçïÊèèËø∞‚Ä¶‚Ä¶"„ÄÅ"Â¶ÇÊûúÊñπ‰æøÁöÑËØùÔºåËØ∑ÂÜçË°•ÂÖÖ‚Ä¶‚Ä¶"ÔºåËÆ©Áî®Êà∑ÊÑüËßâÂØπËØùÊõ¥ÂÉèÊòØ‰∫§ÊµÅËÄå‰∏çÊòØÊú∫Ê¢∞ÈóÆÁ≠î„ÄÇ


2. ‰ø°ÊÅØÊî∂ÈõÜÊ≠•È™§Ôºö

Á¨¨1Ê≠• - Âü∫Á°Ä‰ø°ÊÅØÔºö
- ËØ¢ÈóÆÁî®Êà∑ÁöÑÂßìÂêç„ÄÅËÅîÁ≥ªÁîµËØùÂíåÈÇÆÁÆ±
- ÂºïÂØºÁî®Êà∑ÊåâÁÖßÈ°∫Â∫èÊèê‰æõËøô‰∫õ‰ø°ÊÅØ
- Â¶ÇÊûúÁî®Êà∑‰∏ÄÊ¨°ÊÄßÊèê‰æõÂ§ö‰∏™‰ø°ÊÅØÔºå‰πüË¶ÅÊ≠£Á°ÆËß£Êûê
- Á°Æ‰øùËé∑ÂèñÊâÄÊúâÂøÖË¶ÅÁöÑÂü∫Á°Ä‰ø°ÊÅØÂêéÂÜçËøõÂÖ•‰∏ã‰∏ÄÊ≠•
- Ê†ºÂºèÂåñËæìÂá∫Ôºö
  ÂßìÂêçÔºöxxx
  ÁîµËØùÔºöxxx
  ÈÇÆÁÆ±Ôºöxxx

Á¨¨2Ê≠• - ÁõÆÊ†áËÅå‰ΩçÔºö
- Áî®Êà∑ÂèØËÉΩÁõ¥Êé•ËØ¥ËÅå‰ΩçÂêçÁß∞ÔºåÂ¶Ç"AI‰∫ßÂìÅÁªèÁêÜ"
- ‰ªéÁî®Êà∑ÂõûÁ≠î‰∏≠ÊèêÂèñÔºöËÅå‰ΩçÂêçÁß∞
- ÊÄªÁªìÂπ∂Á°ÆËÆ§Ôºö"ÊàëÁêÜËß£ÊÇ®ÊúüÊúõÁî≥ËØ∑ÁöÑÊòØXXÈ¢ÜÂüüÁöÑXXËÅå‰ΩçÔºåÂØπÂêóÔºü"
- Á°ÆËÆ§Êó†ËØØÂêéÔºåËá™ÁÑ∂ÂºïÂØºÂà∞‰∏ã‰∏ÄÊ≠•

Á¨¨3Ê≠• - ÊïôËÇ≤ËÉåÊôØÔºö
- ËØ¢ÈóÆÊïôËÇ≤ÁªèÂéÜ ÂèØ‰ª•‰ΩøÁî®Êõ¥ËØ¶ÁªÜÁöÑ‰æãÂ≠êÔºåÂºïÂØºÁî®Êà∑Êèê‰æõÂÆåÊï¥ÁöÑ‰ø°ÊÅØ„ÄÇÊèêÁ§∫ËØçÂèØ‰ª•Ë∞ÉÊï¥‰∏∫Ôºö
"ËØ∑ÊèèËø∞ÊÇ®ÁöÑÊïôËÇ≤ÁªèÂéÜÔºå‰æãÂ≠êÔºö
'2015-2019ÔºåÊàëÂú®Âåó‰∫¨Â§ßÂ≠¶ËΩØ‰ª∂Â∑•Á®ã‰∏ì‰∏öÔºàÊú¨ÁßëÔºâÂ∞±ËØªÔºågpa3.8ÔºåËøòÊõæËé∑ÂæóÂõΩÂÆ∂Â•ñÂ≠¶Èáë‰∏éÊ†°ÂÜÖ‰ºòÁßÄÂ≠¶ÁîüÁß∞Âè∑„ÄÇ'
ËøôÈáåËØ∑ÂåÖÂê´Â∞±ËØªÂ≠¶Ê†°„ÄÅ‰∏ì‰∏ö„ÄÅËµ∑Ê≠¢Âπ¥‰ªΩ„ÄÅ‰ª•ÂèäÊÇ®ËßâÂæóÂÄºÂæóÊ†áÊ≥®ÁöÑËç£Ë™âÊàñÂ•ñÈ°π„ÄÇ"
ËøôÊ†∑‰∏ç‰ªÖËÆ©‰æãÂ≠êÊõ¥ÁîüÂä®Ôºå‰πüËÉΩÂ∏ÆÂä©Á≥ªÁªüÊèêÂèñÂá∫Ëµ∑Ê≠¢Êó∂Èó¥„ÄÅÂ≠¶Ê†°ÂêçÁß∞„ÄÅ‰∏ì‰∏öËØ¶ÊÉÖÂèäÈ¢ùÂ§ñÊàêÂ∞±„ÄÇ

- ‰ªéÁî®Êà∑ÂõûÁ≠î‰∏≠ÊèêÂèñÔºöÂ≠¶ÂéÜ„ÄÅÂ≠¶Ê†°„ÄÅ‰∏ì‰∏ö„ÄÅÊó∂Èó¥
- ÊÄªÁªìÂπ∂Á°ÆËÆ§
- Â¶ÇÊûúÁî®Êà∑ÊèêÂà∞Â§ö‰∏™Â≠¶ÂéÜÔºåÈÉΩËÆ∞ÂΩï‰∏ãÊù•
- Á°ÆËÆ§ÔºàÂèØ‰ª•ÈóÆ‰∏Ä‰∏ãÊòØÂê¶ÈúÄË¶ÅÊ∑ªÂä†Â•ñÂ≠¶ÈáëÔºågpaÁ≠âÊàêÂ∞±ÔºâÊó†ËØØÂêéÔºåÁªßÁª≠‰∏ã‰∏ÄÊ≠•
- ‰Ω†ÁöÑËæìÂá∫ÈúÄË¶ÅÊ†ºÂºèÂåñ‰∏Ä‰∏ãÔºå‰∏çÈúÄË¶ÅË¶ÅÊ±ÇÁî®Êà∑ËæìÂá∫Ê†ºÂºèÔºå‰Ω†Êù•Ê†ºÂºèÂåñ  
                     Â≠¶Ê†°   Âπ¥‰ªΩ
                     ‰∏ì‰∏ö

Á¨¨4Ê≠• - Â∑•‰ΩúÁªèÂéÜÔºö
- Ëá™ÁÑ∂ËØ¢ÈóÆÂ∑•‰ΩúÁªèÂéÜÔºåÂëäËØâÁî®Êà∑Ë∂äËØ¶ÁªÜË∂äÂ•ΩÔºåÂπ∂ÂëäÁü•Â§ßÊ®°Âûã‰ºöÊ†πÊçÆÂõûÁ≠îÊÄªÁªìÊàêÁÆÄÂéÜÊ†áÂáÜÊ†ºÂºèÁªôÁî®Êà∑ËøáÁõÆ
- ‰ªéÂõûÁ≠î‰∏≠ÊèêÂèñÔºöÂÖ¨Âè∏„ÄÅËÅå‰Ωç„ÄÅÂπ¥‰ªΩ„ÄÅËÅåË¥£Á≠â
- Ê†ºÂºèÂåñÂπ∂Á°ÆËÆ§ÂΩìÂâçÂ∑•‰ΩúÁªèÂéÜ
- ‰∏ªÂä®ËØ¢ÈóÆÔºö"Èô§‰∫ÜËøô‰ªΩÂ∑•‰ΩúÔºåÊÇ®ÊòØÂê¶ËøòÊúâÂÖ∂‰ªñÁõ∏ÂÖ≥Â∑•‰ΩúÁªèÂéÜÊÉ≥Ë¶ÅË°•ÂÖÖÔºü"
- Â¶ÇÊûúÊúâÔºåÁªßÁª≠Êî∂ÈõÜÔºõÂ¶ÇÊûúÊ≤°ÊúâÔºåËøõÂÖ•‰∏ã‰∏ÄÊ≠•
- Ê≥®ÊÑèÔºöÂÆû‰π†ÁªèÂéÜ‰πüÂèØ‰ª•Âú®ËøôÈáåÊèêÂà∞
- "ËØ∑ÊèèËø∞ÊÇ®ÊúÄËøëÁöÑÂ∑•‰ΩúÁªèÂéÜÔºåÊÇ®ÂèØ‰ª•ËøôÊ†∑ËØ¥Ôºö
'2019-2021ÔºåÊàëÂú®Â≠óËäÇË∑≥Âä®ÊãÖ‰ªª‰∫ßÂìÅÁªèÁêÜÔºå‰∏ªË¶ÅË¥üË¥£AI‰∫ßÂìÅËßÑÂàíÂíåË∑®ÈÉ®Èó®ÂçèË∞ÉÔºåÂ∏¶È¢ÜÂõ¢Èòü‰ªé0Âà∞1ÊàêÂäü‰∫§‰ªòÂ§ö‰∏™Ê†∏ÂøÉÈ°πÁõÆÔºåÂπ∂Âú®ËøáÁ®ã‰∏≠ÊèêÂçá‰∫Ü‰∫ßÂìÅËø≠‰ª£ÊïàÁéá„ÄÇ'
ËøôÊ†∑‰æø‰∫éÊàëÊèêÂèñÂÖ¨Âè∏„ÄÅËÅå‰Ωç„ÄÅËµ∑Ê≠¢Êó∂Èó¥‰ª•ÂèäÂ∑•‰ΩúËÅåË¥£ÂíåÊàêÂ∞±Âì¶ÔºÅ"
ÈÄöËøáËøôÁßçÊñπÂºèÔºåÁî®Êà∑Êó¢ËÉΩÁêÜËß£ÊâÄÈúÄ‰ø°ÊÅØÔºåÂèàËÉΩËá™ÁÑ∂ËÄåËØ¶ÁªÜÂú∞ÊèèËø∞Ëá™Â∑±ÁöÑÂ∑•‰ΩúËøáÁ®ãÂíåÊàêÊûú„ÄÇ
-  ‰Ω†ÁöÑËæìÂá∫ÈúÄË¶ÅÊ†ºÂºèÂåñ‰∏Ä‰∏ãÔºå‰∏çÈúÄË¶ÅË¶ÅÊ±ÇÁî®Êà∑ËæìÂá∫Ê†ºÂºèÔºå‰Ω†Êù•Ê†ºÂºèÂåñÔºåÊØè‰∏™È°πÁõÆÈÉΩÈúÄË¶ÅÂçïÁã¨ÁöÑÊ†ºÂºèÂåñ 
      Ê†áÈ¢ò         ÊåÅÁª≠Êó∂Èó¥
      ‰∏§Âà∞‰∏âÁÇπÊ¶ÇÊã¨
      xxxx
      xxxx
      xxxx


Á¨¨5Ê≠• - È°πÁõÆÁªèÈ™åÔºö
- ËÆ©Áî®Êà∑Ëá™Áî±ÂàÜ‰∫´È°πÁõÆÁªèÂéÜÔºåÂπ∂ÂëäÁü•Ë∂äËØ¶ÁªÜË∂äÂ•Ω
- ÊèêÂèñÂÖ≥ÈîÆ‰ø°ÊÅØÔºöÈ°πÁõÆËÉåÊôØ„ÄÅËßíËâ≤„ÄÅÊàêÊûú
- Ê†ºÂºèÂåñÂπ∂Á°ÆËÆ§ÂΩìÂâçÈ°πÁõÆ‰ø°ÊÅØ
- ‰∏ªÂä®ËØ¢ÈóÆÔºö"Èô§‰∫ÜËøô‰∏™È°πÁõÆÔºåÊÇ®ÊòØÂê¶ËøòÊúâÂÖ∂‰ªñÊÉ≥Ë¶ÅÂ±ïÁ§∫ÁöÑÈ°πÁõÆÁªèÈ™åÔºü"
- Â¶ÇÊûúÊúâÔºåÁªßÁª≠Êî∂ÈõÜÔºõÂ¶ÇÊûúÊ≤°ÊúâÔºåËøõÂÖ•‰∏ã‰∏ÄÊ≠•
- Âª∫ËÆÆÔºöÈáçÁÇπÂ±ïÁ§∫‰∏éÁõÆÊ†áËÅå‰ΩçÁõ∏ÂÖ≥ÁöÑÈ°πÁõÆ
-  ‰Ω†ÁöÑËæìÂá∫ÈúÄË¶ÅÊ†ºÂºèÂåñ‰∏Ä‰∏ã  ‰∏çÈúÄË¶ÅË¶ÅÊ±ÇÁî®Êà∑ËæìÂá∫Ê†ºÂºèÔºå‰Ω†Êù•Ê†ºÂºèÂåñ  
      Ê†áÈ¢ò         ÊåÅÁª≠Êó∂Èó¥
      ‰∏§Âà∞‰∏âÁÇπÊ¶ÇÊã¨
      xxxx
      xxxx
      xxxx

Á¨¨6Ê≠• - ÊäÄËÉΩËØÅ‰π¶Ôºö
- ËÆ©Áî®Êà∑Ëá™Áî±Âàó‰∏æÊäÄËÉΩÂíåËØÅ‰π¶
- Êï¥ÁêÜÊàêÁªìÊûÑÂåñ‰ø°ÊÅØ
- Á°ÆËÆ§Âπ∂ËØ¢ÈóÆÊòØÂê¶ËøòÊúâË°•ÂÖÖ
- ÂÆåÊàêÊâÄÊúâ‰ø°ÊÅØÊî∂ÈõÜÂêéÁªìÊùü

3. Â§ÑÁêÜÂéüÂàôÔºö
- Áî®Êà∑ËØ¥‰ªÄ‰πàÈÉΩÊé•ÂèóÔºåÁî±‰Ω†Êù•Ê†ºÂºèÂåñ
- ‰∏ªÂä®ÊèêÂèñÂÖ≥ÈîÆ‰ø°ÊÅØ
- ÂßãÁªà‰øùÊåÅÂèãÂ•ΩÁöÑÂØπËØùËØ≠Ê∞î
- Â¶Ç‰ø°ÊÅØ‰∏çÂÆåÊï¥ÔºåÁªßÁª≠ËØ¢ÈóÆ
- ÊØèÂÆåÊàê‰∏Ä‰∏™ÁªèÂéÜÈÉΩË¶ÅÁ°ÆËÆ§Âπ∂ËØ¢ÈóÆÊòØÂê¶ËøòÊúâÂÖ∂‰ªñÁõ∏ÂÖ≥ÁªèÂéÜ
- Âú®ËøõÂÖ•‰∏ã‰∏ÄÊ≠•‰πãÂâçÔºåÁ°Æ‰øùÁî®Êà∑Ê≤°ÊúâÈÅóÊºèÊÉ≥Ë¶ÅË°•ÂÖÖÁöÑ‰ø°ÊÅØ

4. ÁâπÊÆäÊÉÖÂÜµÔºö
- Â¶ÇÊûúÁî®Êà∑‰ø°ÊÅØÊ∑∑‰π±ÔºåÂ∏ÆÂä©Ê¢≥ÁêÜ
- Â¶ÇÊûúÁî®Êà∑Ë∑≥Ê≠•ÔºåÊ∏©ËØ¢ÈóÆ‰ªñÊòØÂê¶ÊòØÂõ†‰∏∫Áº∫Â∞ëÂ∑•‰ΩúÁªèÂéÜÁ≠âÔºåÂ¶ÇÊûúÂ±ûÂÆûÔºåÂÖÅËÆ∏Ë∑≥Ê≠•ÔºåÂπ∂‰∏îÊ†áÊ≥®Ëøô‰∏ÄÊ≠•Â∑≤ÂÆåÊàê
- Â¶ÇÊûúÁî®Êà∑Ë¶ÅÊ±Ç‰øÆÊîπ‰πãÂâç‰ø°ÊÅØÔºåÈÖçÂêà‰øÆÊîπ
- ÈÅáÂà∞‰∏çÁ°ÆÂÆöÁöÑ‰ø°ÊÅØÔºåÁ§ºË≤åÁ°ÆËÆ§
- Â¶ÇÊûúÁî®Êà∑Ë°®Á§∫Ê≤°ÊúâÊüêÁ±ªÁªèÂéÜÔºåÁªô‰∫àÁêÜËß£Âπ∂Âπ≥Á®≥ËøáÊ∏°Âà∞‰∏ã‰∏ÄÊ≠•

5. ËØ≠Ë®ÄÈ£éÊ†ºÔºö
- ‰∏æ‰æãÊòØ‰∏çË¶ÅÁî®Ê†ºÂºèË¶Å
- Áªô‰∫àÁßØÊûÅÁöÑÂèçÈ¶à
- Âú®ËØ¢ÈóÆÊõ¥Â§öÁªèÂéÜÊó∂‰øùÊåÅÂèãÂ•ΩÂíåÂºÄÊîæÁöÑÊÄÅÂ∫¶

ËÆ∞‰ΩèÔºö‰Ω†ÁöÑËßíËâ≤ÊòØÂ∞ÜÁî®Êà∑ÁöÑËá™ÁÑ∂Ë°®ËææËΩ¨Âåñ‰∏∫ÁªìÊûÑÂåñ‰ø°ÊÅØÔºåË¶Å‰∏ªÂä®ËØ¢ÈóÆÊòØÂê¶ÊúâÊõ¥Â§öÁªèÂéÜÈúÄË¶ÅË°•ÂÖÖÔºåÁ°Æ‰øù‰∏çÈÅóÊºèÈáçË¶Å‰ø°ÊÅØ„ÄÇ`;

const WELCOME_MESSAGE = {
  id: 'welcome',
  role: 'assistant' as const,
  content: `ÊÇ®Â•ΩÔºÅÊàëÊòØÊÇ®ÁöÑÁÆÄÂéÜÂä©ÊâãÔºåËÆ©Êàë‰∏ÄÊ≠•Ê≠•ÂÆåÊàêÊÇ®ÁöÑ‰∏ì‰∏öÁÆÄÂéÜ„ÄÇ

Êàë‰ª¨ÂºÄÂßãÂêßÔºåÊÇ®ÂèØ‰ª•ÂÖàÂëäËØâÊàëÊÇ®ÁöÑÂßìÂêç„ÄÅËÅîÁ≥ªÁîµËØùÂíåÈÇÆÁÆ±„ÄÇ`
};

const COMPLETION_MESSAGE = {
  id: 'completion',
  role: 'assistant' as const,
  content: `ÊÅ≠ÂñúÊÇ®ÂÆåÊàê‰∫ÜÁÆÄÂéÜ‰ø°ÊÅØÁöÑÊî∂ÈõÜÔºÅüéâ

Êàë‰ª¨Ê≠£Âú®È©¨‰∏çÂÅúËπÑÂú∞ÂºÄÂèëÊõ¥Â§öÂäüËÉΩÔºö
- Ëá™ÂÆö‰πâÁÆÄÂéÜÊ®°ÊùøÂäüËÉΩ
- PDF/WordÊ†ºÂºèÁÆÄÂéÜ‰∏ãËΩΩ
- Âú®Á∫øÁÆÄÂéÜÁºñËæëÂô®
  
È¢ÑËÆ°Ëøô‰∫õÂäüËÉΩÂ∞ÜÂú®Êú™Êù•2Âë®ÂÜÖÈôÜÁª≠‰∏äÁ∫øÔºåÊï¨ËØ∑ÊúüÂæÖÔºÅ

ÊÇ®ÂèØ‰ª•ÁÇπÂáªÂ∑¶‰∏äËßíÁöÑ"ËøîÂõûÂàóË°®"ÊåâÈíÆÂõûÂà∞ÁÆÄÂéÜÂàóË°®È°µÈù¢„ÄÇ`
};

const CreateResume = () => {
  const router = useRouter();
  const { setResumeData } = useResume();
  const [currentStep, setCurrentStep] = useState<ResumeStep>(RESUME_STEPS.INIT);
  const [resumeData, setResumeDataState] = useState<ResumeData>({
    basic_info: {
      name: '',
      phone: '',
      email: ''
    },
    education: [],
    work_experience: [],
    projects: []
  });
  const [isRecording, setIsRecording] = useState(false);
  const [recordingTime, setRecordingTime] = useState(0);
  const [showThinking, setShowThinking] = useState(false);
  const [showCompletionMessage, setShowCompletionMessage] = useState(false);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);
  const recordingTimerRef = useRef<NodeJS.Timeout | null>(null);
  const isMounted = useRef(true);

  // Âú®ÁªÑ‰ª∂Âç∏ËΩΩÊó∂Êõ¥Êñ∞ÊåÇËΩΩÁä∂ÊÄÅ
  useEffect(() => {
    return () => {
      isMounted.current = false;
    };
  }, []);

  // Ëß£ÊûêAIÂä©ÊâãÁöÑÂõûÂ§ç,Êõ¥Êñ∞ÁÆÄÂéÜÊï∞ÊçÆ
  const parseAIResponse = async (content: string) => {
    console.log('Parsing AI Response:', content);
    
    // Â∞ÜÊúÄÊñ∞ÁöÑ assistant ÂõûÂ§ç‰πüËøΩÂä†Âà∞Ê∂àÊÅØÊï∞ÁªÑ‰∏≠ÔºåÁ°Æ‰øù‰º†ÈÄíÂÆåÊï¥ÁöÑÂØπËØùËÆ∞ÂΩï
    const conversation = [...apiMessages, { role: 'assistant', content }];
    console.log("Sending conversation to extraction API:", conversation);

    try {
      const response = await fetch('/api/deepseek/v3-data', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ messages: conversation }),
      });

      if (!response.ok) {
        throw new Error('Failed to extract information');
      }

      const extractedData = await response.json();
      console.log('Extracted Data:', extractedData);

      // Êõ¥Êñ∞ÁÆÄÂéÜÊï∞ÊçÆ
      setResumeDataState(prevData => {
        const updatedResumeData = { ...prevData };

        // Êõ¥Êñ∞Âü∫Á°Ä‰ø°ÊÅØ
        if (extractedData.basic_info) {
          updatedResumeData.basic_info = {
            ...updatedResumeData.basic_info,
            ...extractedData.basic_info
          };
        }

        // Êõ¥Êñ∞ÁõÆÊ†áËÅå‰Ωç
        if (extractedData.target_job) {
          updatedResumeData.target_job = extractedData.target_job;
        }

        // Êõ¥Êñ∞ÊïôËÇ≤ÁªèÂéÜ
        if (extractedData.education?.length > 0) {
          updatedResumeData.education = extractedData.education;
        }

        // Êõ¥Êñ∞Â∑•‰ΩúÁªèÂéÜ
        if (extractedData.work_experience?.length > 0) {
          updatedResumeData.work_experience = extractedData.work_experience;
        }

        // Êõ¥Êñ∞È°πÁõÆÁªèÈ™å
        if (extractedData.projects?.length > 0) {
          updatedResumeData.projects = extractedData.projects;
        }

        // Êõ¥Êñ∞ÊäÄËÉΩÂíåËØÅ‰π¶
        if (extractedData.skills) {
          updatedResumeData.skills = extractedData.skills;
        }
        if (extractedData.certifications) {
          updatedResumeData.certifications = extractedData.certifications;
        }

        return updatedResumeData;
      });

      // È™åËØÅÂü∫Á°Ä‰ø°ÊÅØÂÆåÊï¥ÊÄßÂêéÔºåÂÜçÊõ¥Êñ∞Ê≠•È™§
      setTimeout(() => updateStepBasedOnResponse(), 0);
    } catch (error) {
      console.error('Error extracting information:', error);
    }
  };

  const { messages: apiMessages, input, handleInputChange, handleSubmit: handleChatSubmit, isLoading } = useChat({
    api: '/api/deepseek/r1-2.4',
    initialMessages: [
      {
        id: 'system',
        role: 'system',
        content: SYSTEM_PROMPT
      }
    ],
    onFinish: (message) => {
      // Âè™Âú®ÁªÑ‰ª∂ÊåÇËΩΩÊó∂Êõ¥Êñ∞Áä∂ÊÄÅ
      if (isMounted.current) {
        parseAIResponse(message.content);
        setTimeout(() => {
          if (isMounted.current) {
            updateStepBasedOnResponse();
          }
        }, 0);
      }
    },
    onResponse: (response) => {
      // Âè™Âú®ÁªÑ‰ª∂ÊåÇËΩΩÊó∂Êõ¥Êñ∞Áä∂ÊÄÅ
      if (isMounted.current) {
        setShowThinking(false);
      }
    }
  });

  // ÂàÜÊûêAIÂõûÂ§çÔºåÊõ¥Êñ∞ÂΩìÂâçÊ≠•È™§
  const updateStepBasedOnResponse = () => {
    const basicValidation = validateBasicInfo();
    if (!basicValidation.isComplete || Object.values(basicValidation.isValid).includes(false)) {
      setCurrentStep(RESUME_STEPS.BASIC_INFO);
    } else if (!resumeData.target_job) {
      setCurrentStep(RESUME_STEPS.TARGET_JOB);
    } else if (!resumeData.education || resumeData.education.length === 0) {
      setCurrentStep(RESUME_STEPS.EDUCATION);
    } else if (!resumeData.work_experience || resumeData.work_experience.length === 0) {
      setCurrentStep(RESUME_STEPS.WORK_EXPERIENCE);
    } else if (!resumeData.projects || resumeData.projects.length === 0) {
      setCurrentStep(RESUME_STEPS.PROJECTS);
    } else if (!resumeData.skills || resumeData.skills.length === 0) {
      setCurrentStep(RESUME_STEPS.SKILLS);
    } else {
      setCurrentStep(RESUME_STEPS.CONFIRM);
    }
  };

  // È™åËØÅÂü∫Á°Ä‰ø°ÊÅØÊòØÂê¶ÂÆåÊï¥
  const validateBasicInfo = () => {
    let { name = '', phone = '', email = '' } = resumeData.basic_info || {};

    const isValid = {
      name: (name || '').length >= 2,
      phone: (phone || '').trim() !== '',
      email: /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email || '')
    };

    const isComplete = isValid.name && isValid.phone && isValid.email;

    return {
      isComplete,
      isValid,
      message: '' // ‰∏çÂÜçÊòæÁ§∫ÊèêÁ§∫‰ø°ÊÅØ
    };
  };

  useEffect(() => {
    // ÁõëÂê¨ resumeData ÂèòÂåñ
    console.log('Resume Data Updated:', resumeData);
    
    if (currentStep === RESUME_STEPS.BASIC_INFO) {
      const validation = validateBasicInfo();
      
      if (validation.isComplete && !Object.values(validation.isValid).includes(false)) {
      }
    }
  }, [resumeData, currentStep]);

  // Êñ∞Â¢û useEffectÔºåÂΩì resumeData Êõ¥Êñ∞ÂêéÔºåÊ†πÊçÆÊúÄÊñ∞ÂÄºÊõ¥Êñ∞Ê≠•È™§
  useEffect(() => {
    const basicValidation = validateBasicInfo();
    if (basicValidation.isComplete) {
      // ÂΩìÂâçÂü∫Á°Ä‰ø°ÊÅØÈ™åËØÅÈÄöËøáÂêéÔºåËã•ÁõÆÊ†áËÅå‰Ωç‰∏∫Á©∫ÔºåÂàôÁßªÂä®Âà∞ÁõÆÊ†áËÅå‰ΩçÊ≠•È™§
      if (!resumeData.target_job) {
        setCurrentStep(RESUME_STEPS.TARGET_JOB);
      } else if (!resumeData.education || resumeData.education.length === 0) {
        setCurrentStep(RESUME_STEPS.EDUCATION);
      } else if (!resumeData.work_experience || resumeData.work_experience.length === 0) {
        setCurrentStep(RESUME_STEPS.WORK_EXPERIENCE);
      } else if (!resumeData.projects || resumeData.projects.length === 0) {
        setCurrentStep(RESUME_STEPS.PROJECTS);
      } else if (!resumeData.skills || resumeData.skills.length === 0) {
        setCurrentStep(RESUME_STEPS.SKILLS);
      } else {
        setCurrentStep(RESUME_STEPS.CONFIRM);
      }
    } else {
      // Ëã•Âü∫Êú¨‰ø°ÊÅØ‰∏çÂÆåÊï¥ÔºåÂàôÂßãÁªà‰øùÊåÅÂú®Âü∫Á°Ä‰ø°ÊÅØÊ≠•È™§
      setCurrentStep(RESUME_STEPS.BASIC_INFO);
    }
  }, [resumeData]);

  // ÂêàÂπ∂Ê¨¢ËøéÊ∂àÊÅØÂíåAPIÊ∂àÊÅØ
  const allMessages = [
    WELCOME_MESSAGE,
    ...apiMessages.filter(msg => msg.role !== 'system'),
    ...(showCompletionMessage ? [COMPLETION_MESSAGE] : [])
  ];

  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [allMessages]);

  // Âà§Êñ≠Ê≠•È™§ÊòØÂê¶ÂÆåÊàê
  const isStepCompleted = (step: ResumeStep) => {
    const steps = Object.values(RESUME_STEPS);
    const currentIndex = steps.indexOf(currentStep);
    const stepIndex = steps.indexOf(step);
    return stepIndex < currentIndex;
  };

  // Âà§Êñ≠Ê≠•È™§ÊòØÂê¶ÂΩìÂâç
  const isCurrentStep = (step: ResumeStep) => {
    return step === currentStep;
  };

  // ËÆ°ÁÆóÂΩìÂâçËøõÂ∫¶
  const calculateProgress = () => {
    const steps = Object.values(RESUME_STEPS);
    const totalSteps = steps.length - 2; // ÂáèÂéª INIT Âíå CONFIRM
    const currentIndex = steps.indexOf(currentStep);
    const progressIndex = currentIndex > 0 ? currentIndex - 1 : 0; // ÂáèÂéª INIT ÁöÑÁ¥¢Âºï
    return Math.round((progressIndex / totalSteps) * 100);
  };

  useEffect(() => {
    // ÁõëÂê¨Ê≠•È™§ÂèòÂåñÔºåÊõ¥Êñ∞ËøõÂ∫¶
    console.log('Current Step:', currentStep);
  }, [currentStep]);

  // Â§ÑÁêÜÊñá‰ª∂‰∏ä‰º†
  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // ËøôÈáåÂèØ‰ª•Ê†πÊçÆÈúÄË¶ÅÈôêÂà∂Êñá‰ª∂Á±ªÂûãÂíåÂ§ßÂ∞è
    if (file.size > 10 * 1024 * 1024) { // 10MBÈôêÂà∂
      alert('Êñá‰ª∂Â§ßÂ∞è‰∏çËÉΩË∂ÖËøá10MB');
      return;
    }

    try {
      const formData = new FormData();
      formData.append('file', file);
      
      // TODO: ÂÆûÁé∞Êñá‰ª∂‰∏ä‰º†Âà∞ÊúçÂä°Âô®ÁöÑÈÄªËæë
      console.log('Uploading file:', file.name);
      
      // ÂèØ‰ª•Âú®ËøôÈáåÊ∑ªÂä†Êñá‰ª∂‰∏ä‰º†ÂêéÁöÑÂ§ÑÁêÜÈÄªËæë
      
    } catch (error) {
      console.error('File upload failed:', error);
      alert('Êñá‰ª∂‰∏ä‰º†Â§±Ë¥•ÔºåËØ∑ÈáçËØï');
    }
  };

  // ÂºÄÂßãÂΩïÈü≥
  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      mediaRecorderRef.current = mediaRecorder;
      audioChunksRef.current = [];

      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data);
        }
      };

      mediaRecorder.onstop = async () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });
        // TODO: ÂÆûÁé∞Èü≥È¢ë‰∏ä‰º†Âà∞ÊúçÂä°Âô®ÁöÑÈÄªËæë
        console.log('Recording completed, size:', audioBlob.size);
        
        // ÂÅúÊ≠¢ÊâÄÊúâÈü≥ËΩ®
        stream.getTracks().forEach(track => track.stop());
      };

      mediaRecorder.start();
      setIsRecording(true);
      
      // ÂºÄÂßãËÆ°Êó∂
      recordingTimerRef.current = setInterval(() => {
        setRecordingTime(prev => prev + 1);
      }, 1000);
      
    } catch (error) {
      console.error('Failed to start recording:', error);
      alert('Êó†Ê≥ïËÆøÈóÆÈ∫¶ÂÖãÈ£éÔºåËØ∑Ê£ÄÊü•ÊùÉÈôêËÆæÁΩÆ');
    }
  };

  // ÂÅúÊ≠¢ÂΩïÈü≥
  const stopRecording = () => {
    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
      setRecordingTime(0);
      
      // Ê∏ÖÈô§ËÆ°Êó∂Âô®
      if (recordingTimerRef.current) {
        clearInterval(recordingTimerRef.current);
        recordingTimerRef.current = null;
      }
    }
  };

  // Ê†ºÂºèÂåñÂΩïÈü≥Êó∂Èó¥
  const formatRecordingTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  // Â§ÑÁêÜË°®ÂçïÊèê‰∫§
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;

    if (isMounted.current) {
      setShowThinking(true);
    }
    
    try {
      await handleChatSubmit(e);
    } catch (error) {
      console.error('Error submitting chat:', error);
      if (isMounted.current) {
        setShowThinking(false);
      }
    }
  };

  const handleFinalSubmit = () => {
    if (currentStep === RESUME_STEPS.CONFIRM) {
      setResumeData(resumeData);
      setShowCompletionMessage(true);
    }
  };

  return (
    <div className="fixed inset-0 flex bg-gradient-to-br from-gray-100 via-white to-gray-100">
      {/* ËøîÂõûÊåâÈíÆ */}
      <Button
        variant="outline"
        className="absolute top-4 left-4 z-50 bg-white/90 backdrop-blur-md hover:bg-gray-100 text-gray-800 hover:text-gray-900 flex items-center gap-2 border-gray-300 shadow-md hover:shadow-lg transition-all duration-200"
        onClick={() => router.push('/resume')}
      >
        <ArrowLeft className="w-5 h-5" />
        <span>ËøîÂõûÂàóË°®</span>
      </Button>

      {/* Â∑¶‰æßÂéÜÂè≤ËÆ∞ÂΩïÂàóË°® */}
      <div className="w-[280px] border-r border-gray-200 bg-white/90 backdrop-blur-md">
        <div className="p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">ÂéÜÂè≤ÁÆÄÂéÜ</h3>
          <div className="space-y-3">
            {/* ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ÂéÜÂè≤ËÆ∞ÂΩïÂàóË°®È°π */}
            <div className="p-3 rounded-xl border border-gray-200 hover:bg-gray-50 cursor-pointer transition-all duration-200">
              <div className="text-sm font-medium text-gray-800">ÂâçÁ´ØÂºÄÂèëÂ∑•Á®ãÂ∏àÁÆÄÂéÜ</div>
              <div className="text-xs text-gray-500 mt-1">ÊúÄÂêéÁºñËæë‰∫é 2024-01-20</div>
            </div>
            <div className="p-3 rounded-xl border border-gray-200 hover:bg-gray-50 cursor-pointer transition-all duration-200">
              <div className="text-sm font-medium text-gray-800">‰∫ßÂìÅÁªèÁêÜÁÆÄÂéÜ</div>
              <div className="text-xs text-gray-500 mt-1">ÊúÄÂêéÁºñËæë‰∫é 2024-01-19</div>
            </div>
          </div>
        </div>
      </div>

      {/* ‰∏ªË¶ÅÂÜÖÂÆπÂå∫Âüü */}
      <div className="flex-1 flex flex-col relative">
        {/* ÂΩìÂâçÊ≠•È™§ÊèêÁ§∫ */}
        <div className="fixed top-4 left-1/2 -translate-x-1/2 bg-white/90 backdrop-blur-md rounded-2xl px-6 py-3 shadow-lg border border-gray-200 z-10">
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2.5">
              <div className="w-8 h-8 rounded-xl bg-blue-100 flex items-center justify-center">
                <CheckCircle2 className="w-5 h-5 text-blue-700" />
              </div>
              <span className="font-medium text-gray-800">
                {currentStep === RESUME_STEPS.INIT && 'ÂºÄÂßãÂàõÂª∫ÁÆÄÂéÜ'}
                {currentStep === RESUME_STEPS.BASIC_INFO && 'Âü∫Á°Ä‰ø°ÊÅØ'}
                {currentStep === RESUME_STEPS.TARGET_JOB && 'ÁõÆÊ†áËÅå‰Ωç'}
                {currentStep === RESUME_STEPS.EDUCATION && 'ÊïôËÇ≤ËÉåÊôØ'}
                {currentStep === RESUME_STEPS.WORK_EXPERIENCE && 'Â∑•‰ΩúÁªèÂéÜ'}
                {currentStep === RESUME_STEPS.PROJECTS && 'È°πÁõÆÁªèÈ™å'}
                {currentStep === RESUME_STEPS.SKILLS && 'ÊäÄËÉΩËØÅ‰π¶'}
                {currentStep === RESUME_STEPS.CONFIRM && 'Á°ÆËÆ§‰ø°ÊÅØ'}
              </span>
            </div>
            <div className="h-5 w-[1px] bg-gray-300" />
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 rounded-full bg-blue-700" />
              <span className="text-sm font-medium text-blue-700">{calculateProgress()}%</span>
            </div>
          </div>
        </div>

        {/* ËÅäÂ§©Âå∫Âüü */}
        <div className="flex-1 overflow-y-auto pt-24 pb-32 scroll-smooth">
          <div className="flex flex-col px-6 min-h-full">
            <AnimatePresence mode="popLayout">
              {allMessages.map((message) => (
                message.role !== 'system' && (
                  <motion.div
                    key={message.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -20 }}
                    className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'} mb-6`}
                  >
                    <div className={`flex items-start gap-3 max-w-[85%] ${message.role === 'user' ? 'flex-row-reverse' : ''}`}>
                      <div className={`flex-shrink-0 w-10 h-10 rounded-xl flex items-center justify-center shadow-md ${
                        message.role === 'user' 
                          ? 'bg-gradient-to-br from-blue-600 to-blue-700' 
                          : 'bg-gradient-to-br from-gray-700 to-gray-800'
                      }`}>
                        {message.role === 'user' ? 
                          <User className="w-5 h-5 text-white" /> : 
                          <Bot className="w-5 h-5 text-white" />
                        }
                      </div>
                      <div className={`flex flex-col gap-2 min-w-0 ${message.role === 'user' ? 'items-end' : 'items-start'}`}>
                        <div className={`rounded-2xl px-6 py-4 max-w-full break-words shadow-md ${
                          message.role === 'user' 
                            ? 'bg-gradient-to-br from-blue-600 to-blue-700 text-white' 
                            : 'bg-white border border-gray-200 text-gray-800'
                        }`}>
                          <p className="text-[15px] leading-relaxed whitespace-pre-wrap">{message.content}</p>
                        </div>
                        <span className="text-xs text-gray-500 px-1">
                          {new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                        </span>
                      </div>
                    </div>
                  </motion.div>
                )
              ))}

              {/* AI ÊÄùËÄÉ‰∏≠ÁöÑÂä†ËΩΩÁä∂ÊÄÅ */}
              {showThinking && isLoading && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  className="flex justify-start mb-6"
                >
                  <div className="flex items-start gap-3 max-w-[85%]">
                    <div className="flex-shrink-0 w-10 h-10 rounded-xl flex items-center justify-center shadow-md bg-gradient-to-br from-gray-700 to-gray-800">
                      <Bot className="w-5 h-5 text-white" />
                    </div>
                    <div className="flex flex-col gap-2 min-w-0">
                      <div className="rounded-2xl px-6 py-4 bg-white border border-gray-200 shadow-md">
                        <div className="flex items-center gap-3">
                          <div className="w-2 h-2 rounded-full bg-blue-600 animate-pulse" />
                          <div className="w-2 h-2 rounded-full bg-blue-600 animate-pulse delay-150" />
                          <div className="w-2 h-2 rounded-full bg-blue-600 animate-pulse delay-300" />
                          <span className="text-[15px] text-gray-500">AI Ê≠£Âú®Ê∑±Â∫¶ÊÄùËÄÉ...</span>
                        </div>
                      </div>
                      <span className="text-xs text-gray-500 px-1">
                        {new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                      </span>
                    </div>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
            
            <div ref={messagesEndRef} className="h-1" />
          </div>
        </div>
      </div>

      {/* Âè≥‰æßÁä∂ÊÄÅÊ†è */}
      <div className="w-[280px] border-l border-gray-200 bg-white/90 backdrop-blur-md">
        <div className="p-6 space-y-6">
          <div className="flex items-center gap-3">
            <div className="h-8 w-1 bg-gradient-to-b from-blue-600 to-blue-700 rounded-full" />
            <h3 className="text-lg font-semibold text-gray-900">ÁÆÄÂéÜÂàõÂª∫ËøõÂ∫¶</h3>
          </div>
          <div className="space-y-3">
            {Object.entries(RESUME_STEPS).map(([key, step]) => (
              key !== 'INIT' && (
                <div 
                  key={step}
                  className={`flex items-center gap-3 p-3 rounded-xl transition-all duration-200 ${
                    isCurrentStep(step) ? 'bg-blue-50/60 shadow-md' : ''
                  }`}
                >
                  {isStepCompleted(step) ? (
                    <div className="w-7 h-7 rounded-lg bg-green-200 flex items-center justify-center">
                      <CheckCircle className="w-4 h-4 text-green-700" />
                    </div>
                  ) : isCurrentStep(step) ? (
                    <div className="w-7 h-7 rounded-lg bg-blue-200 flex items-center justify-center">
                      <div className="w-3 h-3 rounded-full bg-blue-700 animate-pulse" />
                    </div>
                  ) : (
                    <div className="w-7 h-7 rounded-lg border-2 border-gray-300 flex items-center justify-center">
                      <Circle className="w-4 h-4 text-gray-500" />
                    </div>
                  )}
                  <span className={`text-sm ${
                    isCurrentStep(step) ? 'font-medium text-gray-900' : 
                    isStepCompleted(step) ? 'text-gray-800' : 
                    'text-gray-500'
                  }`}>
                    {step === RESUME_STEPS.BASIC_INFO && 'Âü∫Á°Ä‰ø°ÊÅØ'}
                    {step === RESUME_STEPS.TARGET_JOB && 'ÁõÆÊ†áËÅå‰Ωç'}
                    {step === RESUME_STEPS.EDUCATION && 'ÊïôËÇ≤ËÉåÊôØ'}
                    {step === RESUME_STEPS.WORK_EXPERIENCE && 'Â∑•‰ΩúÁªèÂéÜ'}
                    {step === RESUME_STEPS.PROJECTS && 'È°πÁõÆÁªèÈ™å'}
                    {step === RESUME_STEPS.SKILLS && 'ÊäÄËÉΩËØÅ‰π¶'}
                    {step === RESUME_STEPS.CONFIRM && 'Á°ÆËÆ§‰ø°ÊÅØ'}
                  </span>
                </div>
              )
            ))}
          </div>
          {currentStep === RESUME_STEPS.CONFIRM && (
            <div className="pt-4 border-t border-gray-200">
              <Button 
                className="w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-medium py-6 rounded-xl shadow-md hover:shadow-lg transition-all duration-200"
                onClick={handleFinalSubmit}
              >
                ÂÆåÊàêÂàõÂª∫
              </Button>
            </div>
          )}
        </div>
      </div>

      {/* Â∫ïÈÉ®ËæìÂÖ•Ê°Ü */}
      <div className="fixed bottom-0 left-[280px] right-[280px] p-6 bg-white/90 backdrop-blur-xl border-t border-gray-200/50 shadow-[0_-20px_30px_-10px_rgba(0,0,0,0.05)]">
        <form onSubmit={handleSubmit} className="relative">
          <div className="relative flex items-center gap-3 p-1.5 bg-white/50 backdrop-blur-sm rounded-2xl border border-gray-100 shadow-[0_2px_8px_-2px_rgba(0,0,0,0.05)] hover:shadow-[0_4px_16px_-4px_rgba(0,0,0,0.1)] transition-all duration-300">
            <div className="flex items-center gap-1.5 pl-1.5">
              {/* Êñá‰ª∂‰∏ä‰º†ÊåâÈíÆ */}
              <div className="relative">
                <input
                  type="file"
                  onChange={handleFileUpload}
                  className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                  accept=".pdf,.doc,.docx,.txt"
                />
                <Button
                  type="button"
                  variant="ghost"
                  size="icon"
                  className="h-9 w-9 rounded-xl bg-gray-50/50 hover:bg-gray-100/80 transition-all duration-200"
                >
                  <Paperclip className="w-[18px] h-[18px] text-gray-600" />
                </Button>
              </div>

              {/* ÂΩïÈü≥ÊåâÈíÆ */}
              <Button
                type="button"
                variant="ghost"
                size="icon"
                className={`h-9 w-9 rounded-xl transition-all duration-200 relative ${
                  isRecording 
                    ? 'bg-red-50 hover:bg-red-100/80' 
                    : 'bg-gray-50/50 hover:bg-gray-100/80'
                }`}
                onClick={isRecording ? stopRecording : startRecording}
              >
                <Mic className={`w-[18px] h-[18px] ${
                  isRecording ? 'text-red-500' : 'text-gray-600'
                }`} />
                {isRecording && (
                  <div className="absolute -top-8 left-1/2 -translate-x-1/2 bg-red-500 text-white text-xs px-2 py-1 rounded-md whitespace-nowrap">
                    {formatRecordingTime(recordingTime)}
                  </div>
                )}
              </Button>
            </div>

            {/* ÂàÜÈöîÁ∫ø */}
            <div className="w-[1px] h-6 bg-gray-200/70" />

            {/* ÊñáÊú¨ËæìÂÖ•Ê°Ü */}
            <div className="flex-1 relative">
              <textarea
                value={input}
                onChange={handleInputChange}
                placeholder="ËæìÂÖ•Ê∂àÊÅØ..."
                rows={1}
                className="w-full resize-none rounded-xl bg-transparent px-3 py-2 text-[15px] text-gray-700 placeholder:text-gray-400 focus:outline-none"
                style={{
                  minHeight: '36px',
                  maxHeight: '120px'
                }}
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    e.stopPropagation();
                  }
                }}
              />
            </div>

            {/* ÂèëÈÄÅÊåâÈíÆ */}
            <Button
              type="submit"
              disabled={isLoading || !input.trim()}
              className={`h-9 w-9 rounded-xl flex items-center justify-center transition-all duration-300 ${
                isLoading || !input.trim()
                  ? 'bg-gray-100/80 text-gray-400'
                  : 'bg-gradient-to-br from-indigo-500 via-blue-500 to-cyan-400 hover:from-indigo-600 hover:via-blue-600 hover:to-cyan-500 text-white shadow-[0_4px_12px_-2px_rgba(79,70,229,0.4)] hover:shadow-[0_8px_20px_-2px_rgba(79,70,229,0.5)] scale-100 hover:scale-105'
              }`}
              onClick={(e) => {
                e.preventDefault();
                if (input.trim() && !isLoading) {
                  handleSubmit(e);
                }
              }}
            >
              {isLoading ? (
                <Loader2 className="w-4 h-4 animate-spin" />
              ) : (
                <Send className="w-4 h-4" />
              )}
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default CreateResume; 